{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/akselea/Malaria-Classification-Image/blob/main/Malaria_Classification_Image.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aHIDGXl57M28"
      },
      "source": [
        "Malaria Cell Images Dataset\n",
        "\n",
        "This Dataset contains Images of Infected Blood caused by Malaria\n",
        "\n",
        "Link to Kaggle Dataset: https://www.kaggle.com/datasets/iarunava/cell-images-for-detecting-malaria"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9J2Rtfc-7M3A"
      },
      "source": [
        "Input the Library:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "0sGi-ER07M3B"
      },
      "outputs": [],
      "source": [
        "import pathlib\n",
        "import os\n",
        "from google.colab import files\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.image as mpimg\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing import image\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Downloading and Input Dataset from Kaggle:"
      ],
      "metadata": {
        "id": "2xbVdbos7Tef"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Installing the Kaggle Library:\n",
        "! pip install -q kaggle"
      ],
      "metadata": {
        "id": "zmmSTf9X7Vno"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Uploading Kaggle API for Access the Kaggle Dataset\n",
        "files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "id": "Z8BMmNO27b2D",
        "outputId": "5a9ae511-1ef5-45a9-862c-b8b645ea9369"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-6ae14cff-c9c1-406b-a4e0-c125e79ecdf4\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-6ae14cff-c9c1-406b-a4e0-c125e79ecdf4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle.json': b'{\"username\":\"akselestevannandaa\",\"key\":\"44c442f9cdc444cb5e21471f685f8c7a\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make Directory for Kaggle API\n",
        "! mkdir ~/.kaggle\n",
        "! cp kaggle.json ~/.kaggle/"
      ],
      "metadata": {
        "id": "tyKuCZbOdEiq"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "! chmod 600 /root/.kaggle/kaggle.json"
      ],
      "metadata": {
        "id": "PzbujugzemON"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Downloading Malaria Image Dataset from Kaggle and Unzip It\n",
        "!kaggle datasets download iarunava/cell-images-for-detecting-malaria -p /content/dataset/ --unzip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mgOOQ6aWdE2u",
        "outputId": "04276f42-cd06-447a-ffcc-4243773d01a1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading cell-images-for-detecting-malaria.zip to /content/dataset\n",
            "100% 673M/675M [00:08<00:00, 59.6MB/s]\n",
            "100% 675M/675M [00:08<00:00, 87.8MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R8HR32FV7M3E"
      },
      "source": [
        "Organize and Mapping the Dataset:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "08Dil7m57M3E"
      },
      "outputs": [],
      "source": [
        "# Mapping and Organize Path of Dataset\n",
        "dataset = '/content/dataset/cell_images/cell_images'\n",
        "uninfected = os.path.join(dataset, 'Uninfected')\n",
        "infected = os.path.join(dataset, 'Parasitized')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vBNjKt0k7M3E",
        "outputId": "32286420-b832-4d5d-ce45-24634995eaa2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Infected Samples: 13780\n",
            "Total Uninfected Samples: 13780\n",
            "Total Samples: 27560\n"
          ]
        }
      ],
      "source": [
        "# Calculating Total Image Samples in Dataset\n",
        "total_uninfected = len(os.listdir(uninfected))\n",
        "total_infected = len(os.listdir(infected))\n",
        "total_img = total_uninfected + total_infected\n",
        "\n",
        "print(\"Total Infected Samples:\", total_infected)\n",
        "print(\"Total Uninfected Samples:\", total_uninfected)\n",
        "print(\"Total Samples:\", total_img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "_UAhq9PE7M3G",
        "outputId": "afd4053c-5642-44d7-e6ba-699b34cbac97"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Showing Uninfected and Infected Sample in Dataset\n",
        "img_inf = image.load_img(r'/content/dataset/cell_images/cell_images/Parasitized/C101P62ThinF_IMG_20150918_151006_cell_84.png')\n",
        "img_uninf = image.load_img(r'/content/dataset/cell_images/cell_images/Uninfected/C101P62ThinF_IMG_20150918_151507_cell_15.png')\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(10, 5))\n",
        "axes[0].imshow(img_inf)\n",
        "axes[0].set_title('Infected Sample')\n",
        "axes[1].imshow(img_uninf)\n",
        "axes[1].set_title('Uninfected Sample')\n",
        "\n",
        "for ax in axes:\n",
        "    ax.axis('off')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BklU1DAT7M3G"
      },
      "source": [
        "Designing the Model:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LfG2bo2j7M3H",
        "outputId": "9bc82099-fdc9-436f-c280-05ce431e8628"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 24804 images belonging to 2 classes.\n",
            "Found 2754 images belonging to 2 classes.\n"
          ]
        }
      ],
      "source": [
        "# Split the Dataset into Train Data and Validation Data\n",
        "train_data = ImageDataGenerator(rescale=1/255,\n",
        "                                width_shift_range=0.3,\n",
        "                                height_shift_range=0.3,\n",
        "                                horizontal_flip=True,\n",
        "                                vertical_flip=True,\n",
        "                                fill_mode='nearest',\n",
        "                                validation_split=0.1)\n",
        "\n",
        "train_generator = train_data.flow_from_directory(dataset, \n",
        "                                                 target_size=(150, 150),\n",
        "                                                 batch_size=16,\n",
        "                                                 color_mode='rgb',\n",
        "                                                 class_mode='binary',\n",
        "                                                 subset='training')\n",
        "\n",
        "valid_data = ImageDataGenerator(rescale=1/255,\n",
        "                                validation_split=0.1)\n",
        "\n",
        "valid_generator = valid_data.flow_from_directory(dataset,\n",
        "                                                 target_size=(150, 150),\n",
        "                                                 batch_size=16,\n",
        "                                                 color_mode='rgb',\n",
        "                                                 class_mode='binary',\n",
        "                                                 subset='validation')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ElPXyKQf7M3H",
        "outputId": "0f274eeb-bc74-4676-aa0b-5f602d557228"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 148, 148, 16)      448       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 74, 74, 16)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 72, 72, 32)        4640      \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 36, 36, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 34, 34, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 17, 17, 64)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 18496)             0         \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 18496)             0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 64)                1183808   \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 1)                 65        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,207,457\n",
            "Trainable params: 1,207,457\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "# Building the Model\n",
        "model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),\n",
        "                                    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), padding='valid'),\n",
        "                                    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),\n",
        "                                    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), padding='valid'),\n",
        "                                    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "                                    tf.keras.layers.MaxPooling2D(pool_size=(2, 2), padding='valid'),\n",
        "                                    tf.keras.layers.Flatten(),\n",
        "                                    tf.keras.layers.Dropout(0.2),\n",
        "                                    tf.keras.layers.Dense(64, activation='relu'),\n",
        "                                    tf.keras.layers.Dense(1, activation='sigmoid')])\n",
        "\n",
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "95WCutIy7M3I"
      },
      "outputs": [],
      "source": [
        "# Compile Model\n",
        "model.compile(optimizer=tf.optimizers.Adam(learning_rate=10e-4),\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Building Scheduler Function\n",
        "def scheduler(epoch, lr, logs=None):\n",
        "  if logs is None:\n",
        "    return lr\n",
        "  else:\n",
        "    if (logs.get('accuracy') > 0.90) & (logs.get('val_accuracy') > 0.90):\n",
        "      return lr * tf.math.exp(-0.1)\n",
        "    else:\n",
        "      return lr\n",
        "\n",
        "lr_schedule = tf.keras.callbacks.LearningRateScheduler(scheduler, verbose=1)"
      ],
      "metadata": {
        "id": "y2rpY8ExiOaS"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Builiding Callback Function\n",
        "class StopCallback(tf.keras.callbacks.Callback):\n",
        "  def on_epoch_end(self, epoch, logs={}):\n",
        "    if (logs.get('accuracy') > 0.92) & (logs.get('val_accuracy') > 0.92):\n",
        "      print(\"\\nStop Training, Accuracy > 92%.\")\n",
        "      self.model.stop_training = True\n",
        "\n",
        "callback = StopCallback()"
      ],
      "metadata": {
        "id": "XgU-erRcke86"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GKdFW7ae7M3J",
        "outputId": "ac5789cc-f125-4af7-bc18-14ea2d0e8c57"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch 1: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 1/15\n",
            "1551/1551 [==============================] - 176s 107ms/step - loss: 0.6737 - accuracy: 0.5685 - val_loss: 0.4855 - val_accuracy: 0.8312 - lr: 0.0010\n",
            "\n",
            "Epoch 2: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 2/15\n",
            "1551/1551 [==============================] - 171s 110ms/step - loss: 0.4705 - accuracy: 0.7894 - val_loss: 0.2346 - val_accuracy: 0.9092 - lr: 0.0010\n",
            "\n",
            "Epoch 3: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 3/15\n",
            "1551/1551 [==============================] - 164s 106ms/step - loss: 0.2887 - accuracy: 0.8928 - val_loss: 0.2497 - val_accuracy: 0.9154 - lr: 0.0010\n",
            "\n",
            "Epoch 4: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 4/15\n",
            "1551/1551 [==============================] - 165s 106ms/step - loss: 0.2715 - accuracy: 0.9028 - val_loss: 0.2122 - val_accuracy: 0.9187 - lr: 0.0010\n",
            "\n",
            "Epoch 5: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 5/15\n",
            "1551/1551 [==============================] - 163s 105ms/step - loss: 0.2532 - accuracy: 0.9097 - val_loss: 0.2564 - val_accuracy: 0.9147 - lr: 0.0010\n",
            "\n",
            "Epoch 6: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 6/15\n",
            "1551/1551 [==============================] - 163s 105ms/step - loss: 0.2411 - accuracy: 0.9147 - val_loss: 0.2085 - val_accuracy: 0.9325 - lr: 0.0010\n",
            "\n",
            "Epoch 7: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 7/15\n",
            "1551/1551 [==============================] - 163s 105ms/step - loss: 0.2374 - accuracy: 0.9159 - val_loss: 0.2648 - val_accuracy: 0.9194 - lr: 0.0010\n",
            "\n",
            "Epoch 8: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 8/15\n",
            "1551/1551 [==============================] - 162s 104ms/step - loss: 0.2312 - accuracy: 0.9180 - val_loss: 0.1804 - val_accuracy: 0.9317 - lr: 0.0010\n",
            "\n",
            "Epoch 9: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 9/15\n",
            "1551/1551 [==============================] - 163s 105ms/step - loss: 0.2240 - accuracy: 0.9203 - val_loss: 0.2860 - val_accuracy: 0.9198 - lr: 0.0010\n",
            "\n",
            "Epoch 10: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 10/15\n",
            "1551/1551 [==============================] - 161s 104ms/step - loss: 0.2260 - accuracy: 0.9199 - val_loss: 0.2145 - val_accuracy: 0.9303 - lr: 0.0010\n",
            "\n",
            "Epoch 11: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 11/15\n",
            "1551/1551 [==============================] - 163s 105ms/step - loss: 0.2187 - accuracy: 0.9228 - val_loss: 0.2508 - val_accuracy: 0.9176 - lr: 0.0010\n",
            "\n",
            "Epoch 12: LearningRateScheduler setting learning rate to 0.0010000000474974513.\n",
            "Epoch 12/15\n",
            "1551/1551 [==============================] - ETA: 0s - loss: 0.2225 - accuracy: 0.9209\n",
            "Stop Training, Accuracy > 92%.\n",
            "1551/1551 [==============================] - 163s 105ms/step - loss: 0.2225 - accuracy: 0.9209 - val_loss: 0.2335 - val_accuracy: 0.9299 - lr: 0.0010\n"
          ]
        }
      ],
      "source": [
        "# Run Training Stage for Model\n",
        "history = model.fit(train_generator,\n",
        "                    steps_per_epoch=len(train_generator),\n",
        "                    epochs=15,\n",
        "                    batch_size=16,\n",
        "                    validation_data=valid_generator,\n",
        "                    validation_steps=len(valid_generator),\n",
        "                    verbose=1,\n",
        "                    callbacks=[lr_schedule, callback])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "WDrsGHxo7M3J",
        "outputId": "2137d8e7-b8e6-42f0-8084-0a163165c60d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Accuracy Model Plot\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Model Accuracy')\n",
        "plt.legend(['Train', 'Validation'], loc='lower left')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "IqMGweby7M3K",
        "outputId": "b9e6b097-012e-449b-acfb-1a9197f3d99c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Loss Model Plot\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('Loss Model')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Model')\n",
        "plt.legend(['Train', 'Validation'], loc='upper right')\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.0"
    },
    "orig_nbformat": 4,
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}